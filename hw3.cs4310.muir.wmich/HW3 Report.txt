A brief explanation of the problem and Huffman algorithm.

The problem is to compress a file containing a string into a much smaller file by assigning and converting the characters used 
into binary represented numbers. Once the string is compressed, it should be able to be uncompressed back into it's original form.

The Huffman algorithm counds the frequency of each character used and assigns it to a tree. Using the frequency, the laf nodes contain 
the probabilites of the characters used in the string. The algorithm takes the 2 nodes with the smallest probability and assigns them as children. 
This repeats until there is one remaining node. The remaining node becomes the root node.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Show an example of the input string you used and the output generated by your code.

Enter the string you would like to compress.
Hello, I am testing this string!

The following is being printed to the file: inputFile.txt
hello, i am testing this string!

File has been created and put into the project folder.

Print out characters and their represented numbers

Print out encoded text and write to encodedFile.txt
1110100010111011111011111110001100110010000000100111100111011010100000100101011010001000001100001000100000111101000000110101000110100011100111000001100001001101100

hello, i am testing this string!
Time completed in: 8085946323 nano-seconds


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Discuss how this approach helps to decrease the size of the input.
Since chars take up about 8 bytes each, converting a char into bits will save space when put into a to a binary file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Discuss about the running time of your implementation based on different inputs and compare it with the theoretically derived complexity.

Below are a few sample sentences and their running time:

there was no ice cream in the freezer, nor did they have money to go to the store.
Time completed in: 1866865290 nano-seconds

He didn’t want to go to the dentist, yet he went anyway. The lake is a long way from here. How was the math test? The body may perhaps compensates for the loss of a true metaphysics.Two seats were vacant.
Time completed in: 1703899004 nano-seconds

the
Time completed in: 1364039048 nano-seconds

the quick brown fox jumps over the lazy dog
Time completed in: 1317389969 nano-seconds

considering how common illness is, how tremendous the spiritual change that it brings, 
how astonishing, when the lights of health go down, the undiscovered countries that are then disclosed, 
what wastes and deserts of the soul a slight attack of influenza brings to view, what precipices and lawns 
sprinkled with bright flowers a little rise of temperature reveals, what ancient and obdurate oaks are uprooted 
in us by the act of sickness, how we go down into the pit of death and feel the water of annihilation close 
above our heads and wake thinking to find ourselves in the presence of the angels and harpers when we have a 
tooth out and come to the surface in the dentist’s arm-chair and confuse his “rinse the mouth —- rinse the mouth” 
with the greeting of the deity stooping from the floor of heaven to welcome us – when we think of this, as we are 
frequently forced to think of it, it becomes strange indeed that illness has not taken its place with love and battle 
and jealousy among the prime themes of literature.
Time completed in: 2101710325 nano-seconds

In my own results, it seems like the time is fairly constant. The size of the string entered did not increase or deacrease the time to complete the program.
The theoretically derived complexity should be nlogn.